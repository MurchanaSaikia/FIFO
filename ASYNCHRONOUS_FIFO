module ASYNC_FIFO(
 rd_clk,wr_clk,rst,wr_enable,rd_enable,wr_data,rd_data,wr_error,rd_error,full,empty
    );
    integer i;
    parameter depth=16,width=8,ptr_width=4;
    input rd_clk,wr_clk,rst,wr_enable,rd_enable;
    input [width-1:0] wr_data;
    output reg [width-1:0] rd_data;
    output reg wr_error,rd_error,full,empty;
    //rd_ptr,wr_prt and toggle flags are internal to the fifo
    reg 
[ptr_width-1:0]rd_ptr,wr_ptr,rd_ptr_gray,wr_ptr_gray,wr_ptr_gray_rd_clk,rd_ptr_gray_w
 r_clk;
    reg rd_toggle_f,wr_toggle_f, wr_toggle_f_rd_clk, rd_toggle_f_wr_clk;
    //declare the memory
    reg [width-1:0]fifo_mem[depth-1:0];
    //processes in fifo
    //rd and write happens in different clock so read and write should be coded in 
different  alwyas block
    //WRITE always block
    //we can write rst logic in either write or read always block(for 10 clock we 
will not go for 10 rst
    //here we are providing rst in write always block
    always @(posedge wr_clk) begin
     if(rst)
     begin
     //update all the reg values when rst is applied
     rd_data=0;
     wr_error=0;
     rd_error=0;
     full=0;
     empty=1;
     rd_ptr=0;
     wr_ptr=0;
     rd_ptr_gray=0;
     wr_ptr_gray=0;
     wr_ptr_gray_rd_clk=0;
     rd_ptr_gray_wr_clk=0;
     rd_toggle_f=0;
     wr_toggle_f=0;
     wr_toggle_f_rd_clk=0;
      rd_toggle_f_wr_clk=0;
     for(i=0;i<depth;i=i+1)
     begin
          fifo_mem[i]=0;
     end
     end
     else
     begin
     if(wr_enable==1)
     begin
         if(full==1)
         begin
         wr_error=1;
         end
         else
          begin
          fifo_mem[wr_ptr]=wr_data;
          if(wr_ptr==(depth-1))wr_toggle_f=~wr_toggle_f;
          wr_ptr=wr_ptr+1;
          wr_ptr_gray={wr_ptr[3],wr_ptr[3:1]^wr_ptr[2:0]};
         end
     end
     end
    end
  // READ always block  
  always @(posedge rd_clk) begin
     if(rst!=1)// go in to this code when reset is not high 
     begin
     if(rd_enable==1)
     begin
     if(empty==1)
              begin
              rd_error=1;
              end
              else
               begin
              rd_data= fifo_mem[rd_ptr];
               if(rd_ptr==(depth-1))rd_toggle_f=~rd_toggle_f;
               //increament the read pointer
               rd_ptr=rd_ptr+1;
               rd_ptr_gray={rd_ptr[3],rd_ptr[3:1]^rd_ptr[2:0]};
              end
     end
     end
    end
    always @(rd_clk)
    begin
    wr_ptr_gray_rd_clk <= wr_ptr_gray;
    wr_toggle_f_rd_clk <= wr_toggle_f;
    end
    always @(wr_clk)
    begin
    rd_ptr_gray_wr_clk <= rd_ptr_gray;
    rd_toggle_f_wr_clk <= rd_toggle_f;
    end
    always @(*)
    begin
    empty=0;
    full=0;
    if (rd_ptr_gray == wr_ptr_gray_rd_clk)
    begin
    if(rd_toggle_f==wr_toggle_f_rd_clk) 
    begin
    empty=1;
    full=0;
    end
    end 
    if(rd_ptr_gray_wr_clk == wr_ptr_gray)
    begin
    if(rd_toggle_f_wr_clk != wr_toggle_f)
    begin
    empty=0;
     full=1;
     end
    end
    end
 endmodule
